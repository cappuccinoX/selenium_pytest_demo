{"name": "test_1", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: '2021-03-14-10-53-39.png'", "trace": "self = <testcases.test_user_register.TestUserRegister object at 0x10d10bf40>\n\n    def test_1(self):\n>       util.get_code_with_pytesseract(self.driver, \"captchaimg\", \"id\")\n\ntestcases/test_user_register.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutil/util.py:47: in get_code_with_pytesseract\n    im = Image.open(file_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfp = '2021-03-14-10-53-39.png', mode = 'r', formats = []\n\n    def open(fp, mode=\"r\", formats=None):\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), pathlib.Path object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            raise ValueError(f\"bad mode {repr(mode)}\")\n        elif isinstance(fp, io.StringIO):\n            raise ValueError(\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            raise TypeError(\"formats must be a list or tuple\")\n    \n        exclusive_fp = False\n        filename = \"\"\n        if isinstance(fp, Path):\n            filename = str(fp.resolve())\n        elif isPath(fp):\n            filename = fp\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '2021-03-14-10-53-39.png'\n\n../../../Library/Python/3.8/lib/python/site-packages/PIL/Image.py:2904: FileNotFoundError"}, "start": 1615690419637, "stop": 1615690420453, "uuid": "0f061de5-6b96-4c6d-8c8c-2e37df5da9e1", "historyId": "e3a86689722ff05d1875f7dbfc5974f9", "testCaseId": "61181991109c15a2397cf39a61ed01a0", "fullName": "testcases.test_user_register.TestUserRegister#test_1", "labels": [{"name": "feature", "value": "用户注册"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_user_register"}, {"name": "subSuite", "value": "TestUserRegister"}, {"name": "host", "value": "xuyaogangdeAir.lan"}, {"name": "thread", "value": "18828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_user_register"}]}